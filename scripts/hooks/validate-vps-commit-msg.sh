#!/usr/bin/env bash
# validate-vps-commit-msg.sh
# Validar formato de mensagens de commit para VPS Infrastructure

set -euo pipefail

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

commit_msg_file=$1

if [[ ! -f "$commit_msg_file" ]]; then
    echo -e "${RED}‚ùå Arquivo de mensagem de commit n√£o encontrado${NC}"
    exit 1
fi

commit_msg=$(cat "$commit_msg_file")

echo -e "${YELLOW}üìù Validando mensagem de commit...${NC}"

# Ignorar commits de merge e revert
if [[ $commit_msg =~ ^Merge || $commit_msg =~ ^Revert ]]; then
    echo -e "${GREEN}‚úÖ Commit de merge/revert - valida√ß√£o ignorada${NC}"
    exit 0
fi

# Padr√µes permitidos para VPS Infrastructure
valid_types=(
    "feat"      # Nova funcionalidade
    "fix"       # Corre√ß√£o de bug
    "docs"      # Documenta√ß√£o
    "style"     # Formata√ß√£o
    "refactor"  # Refatora√ß√£o
    "test"      # Testes
    "chore"     # Manuten√ß√£o
    "ci"        # CI/CD
    "infra"     # Infraestrutura
    "config"    # Configura√ß√£o
    "vagrant"   # Espec√≠fico para Vagrant
    "vps"       # Espec√≠fico para VPS
    "network"   # Configura√ß√µes de rede
)

# √Åreas espec√≠ficas do projeto
valid_scopes=(
    "api"
    "vagrant"
    "network"
    "docs"
    "core"
    "app"
    "gitlab"
    "nginx"
    "monitoring"
    "security"
    "backup"
)

# Validar formato: type(scope): description
if [[ $commit_msg =~ ^([a-z]+)(\([a-z]+\))?: ]]; then
    type="${BASH_REMATCH[1]}"
    scope_part="${BASH_REMATCH[2]}"

    # Remover par√™nteses do scope
    scope="${scope_part//[()]/}"

    # Validar tipo
    if [[ ! " ${valid_types[*]} " == *" ${type} "* ]]; then
        echo -e "${RED}‚ùå Tipo de commit inv√°lido: '$type'${NC}"
        echo -e "${YELLOW}Tipos v√°lidos: ${valid_types[*]}${NC}"
        exit 1
    fi

    # Validar scope se presente
    if [[ -n "$scope" && ! " ${valid_scopes[*]} " == *" ${scope} "* ]]; then
        echo -e "${RED}‚ùå Escopo inv√°lido: '$scope'${NC}"
        echo -e "${YELLOW}Escopos v√°lidos: ${valid_scopes[*]}${NC}"
        exit 1
    fi

    # Extrair e validar descri√ß√£o
    description="${commit_msg#*: }"

    # Verificar comprimento da primeira linha
    first_line=$(echo "$commit_msg" | head -n1)
    if [[ ${#first_line} -gt 72 ]]; then
        echo -e "${RED}‚ùå Primeira linha muito longa (${#first_line} chars, m√°ximo 72)${NC}"
        exit 1
    fi

    # Verificar se come√ßa com min√∫scula
    if [[ ! $description =~ ^[a-z] ]]; then
        echo -e "${RED}‚ùå Descri√ß√£o deve come√ßar com letra min√∫scula${NC}"
        exit 1
    fi

    # Verificar se n√£o termina com ponto
    if [[ $description =~ \.$ ]]; then
        echo -e "${RED}‚ùå Descri√ß√£o n√£o deve terminar com ponto${NC}"
        exit 1
    fi

    echo -e "${GREEN}‚úÖ Formato de commit v√°lido: $type${scope_part}${NC}"

else
    echo -e "${RED}‚ùå Formato de commit inv√°lido${NC}"
    echo -e "${YELLOW}Formato correto: tipo(escopo): descri√ß√£o${NC}"
    echo -e "${YELLOW}Exemplo: feat(api): adicionar endpoint para gerenciar VMs${NC}"
    echo -e "${YELLOW}Exemplo: fix(vagrant): corrigir configura√ß√£o de rede privada${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Mensagem de commit validada!${NC}"
