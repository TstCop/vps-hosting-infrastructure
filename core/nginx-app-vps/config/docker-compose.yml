---
# Docker Compose Configuration for VPS Hosting Application
# Production environment with Nginx reverse proxy and Node.js application

version: '3.8'

services:
  # Node.js Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: vps-hosting-app:latest
    container_name: vps-hosting-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
      - API_PORT=8080
      - DATABASE_URL=postgresql://app_user:${DB_PASSWORD}@10.0.0.10:5432/app_production?sslmode=require
      - REDIS_URL=redis://10.0.0.10:6379/0
      - JWT_SECRET=${JWT_SECRET}
      - GITLAB_API_URL=https://gitlab.vps.local/api/v4
      - GITLAB_TOKEN=${GITLAB_TOKEN}
    ports:
      - "3000:3000"
      - "8080:8080"
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_uploads:/app/uploads
    networks:
      - app-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Redis Cache/Session Store
  redis:
    image: redis:7-alpine
    container_name: vps-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vps-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites-available:/etc/nginx/sites-available:ro
      - ./config/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
      - letsencrypt_certs:/etc/letsencrypt:ro
      - letsencrypt_www:/var/www/certbot:ro
    networks:
      - app-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: vps-certbot
    restart: "no"
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - letsencrypt_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx

  # Monitoring with Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: vps-node-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Log aggregation with Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: vps-promtail
    restart: unless-stopped
    volumes:
      - ./config/promtail/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - nginx_logs:/var/log/nginx:ro
      - app_logs:/var/log/app:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - app-network
    depends_on:
      - app
      - nginx

# Networks
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# Volumes
volumes:
  # Application data
  app_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/app/data

  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/app/logs

  app_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/app/uploads

  # Redis data
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/redis/data

  # Nginx data
  nginx_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/nginx/cache

  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/nginx/logs

  # SSL certificates
  letsencrypt_certs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/letsencrypt/certs

  letsencrypt_www:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/letsencrypt/www
